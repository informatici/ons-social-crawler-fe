app:
  FullnameOverride: ""
  NameOverride: ""
  affinity: {}
  annotations: {}
  args:
  - label-studio-uwsgi
  automountServiceAccountToken: true
  cmdWrapper: ""
  containerSecurityContext:
    allowPrivilegeEscalation: false
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  contextPath: /
  deploymentStrategy:
    type: RollingUpdate
  dnsPolicy: ClusterFirst
  enableServiceLinks: false
  extraEnvironmentSecrets: {}
  extraEnvironmentVars: {}
  extraLabels: {}
  extraVolumeMounts: []
  extraVolumes: []
  ingress:
    annotations: {}
    className: ""
    enabled: false
    extraHosts: []
    extraPaths: []
    host: ""
    path: /
    pathType: ImplementationSpecific
    tls: []
  initContainer:
    resources:
      limits: {}
      requests: {}
  labels: {}
  livenessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 60
    path: /health
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  nginx:
    args:
    - nginx
    extraEnvironmentSecrets: {}
    extraEnvironmentVars: {}
    livenessProbe:
      enabled: true
      failureThreshold: 2
      initialDelaySeconds: 60
      path: /nginx_health
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 3
    readinessProbe:
      enabled: true
      failureThreshold: 2
      initialDelaySeconds: 60
      path: /version
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources:
      limits: {}
      requests: {}
  nodeSelector: {}
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  preStopDelaySeconds: 15
  rbac:
    create: false
    rules: []
  readinessProbe:
    enabled: false
    failureThreshold: 2
    initialDelaySeconds: 60
    path: /version
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicas: 1
  resources:
    limits: {}
    requests: {}
  service:
    annotations: {}
    port: 80
    portName: service
    sessionAffinity: None
    sessionAffinityConfig: {}
    targetPort: 8085
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  shareProcessNamespace: false
  terminationGracePeriodSeconds: 30
  tolerations: []
  topologySpreadConstraints: []
checkConfig:
  skipEnvValues: false
ci: false
clusterDomain: cluster.local
cronjob:
  annotations: {}
  enabled: false
  jobs: {}
enterprise:
  enabled: false
  enterpriseLicense:
    secretKey: license
    secretName: ""
global:
  cmdWrapper: ""
  customCaCerts: []
  envInjectSources: []
  extraEnvironmentSecrets: {}
  extraEnvironmentVars: {}
  featureFlags: {}
  image:
    pullPolicy: IfNotPresent
    repository: heartexlabs/label-studio
    tag: "1.8.2"
  imagePullSecrets: []
  persistence:
    config:
      azure:
        containerName: ""
        folder: ""
        storageAccountKey: ""
        storageAccountKeyExistingSecret: ""
        storageAccountKeyExistingSecretKey: ""
        storageAccountName: ""
        storageAccountNameExistingSecret: ""
        storageAccountNameExistingSecretKey: ""
        urlExpirationSecs: "86400"
      gcs:
        applicationCredentialsJSON: ""
        applicationCredentialsJSONExistingSecret: ""
        applicationCredentialsJSONExistingSecretKey: ""
        bucket: ""
        folder: ""
        projectID: ""
        urlExpirationSecs: "86400"
      s3:
        accessKey: ""
        accessKeyExistingSecret: ""
        accessKeyExistingSecretKey: ""
        bucket: ""
        endpointUrl: ""
        folder: ""
        objectParameters: {}
        region: ""
        secretKey: ""
        secretKeyExistingSecret: ""
        secretKeyExistingSecretKey: ""
        urlExpirationSecs: "86400"
      volume:
        accessModes:
        - ReadWriteOnce
        annotations: {}
        existingClaim: ""
        resourcePolicy: ""
        size: 10Gi
        storageClass: ""
    enabled: true
    type: volume
  pgConfig:
    dbName: ""
    host: ""
    password:
      secretKey: ""
      secretName: ""
    port: 5432
    ssl:
      pgSslCertSecretKey: ""
      pgSslKeySecretKey: ""
      pgSslMode: ""
      pgSslRootCertSecretKey: ""
      pgSslSecretName: ""
    userName: ""
  redisConfig:
    host: ""
    password:
      secretKey: ""
      secretName: ""
    ssl:
      redisSslCaCertsSecretKey: ""
      redisSslCertFileSecretKey: ""
      redisSslCertReqs: ""
      redisSslKeyFileSecretKey: ""
      redisSslSecretName: ""
metrics:
  enabled: false
  uwsgiExporter:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      enabled: true
      readOnlyRootFilesystem: false
      runAsUser: 1001
    enabled: false
    image:
      pullPolicy: Always
      pullSecrets: []
      registry: docker.io
      repository: timonwong/uwsgi-exporter
      tag: v1.3.0
    livenessProbe:
      enabled: true
      failureThreshold: 3
      httpGet:
        path: /-/healthy
        port: uwsgimetrics
      initialDelaySeconds: 2
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    readinessProbe:
      enabled: true
      failureThreshold: 3
      httpGet:
        path: /metrics
        port: uwsgimetrics
      initialDelaySeconds: 2
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources:
      limits:
        cpu: ".01"
        memory: 128Mi
      requests:
        cpu: ".001"
        memory: 6Mi
postgresql:
  architecture: standalone
  audit:
    clientMinMessages: error
    logConnections: false
    logDisconnections: false
    logHostname: false
    logLinePrefix: ""
    logTimezone: ""
    pgAuditLog: ""
    pgAuditLogCatalog: "off"
  auth:
    database: labelstudio
    enablePostgresUser: true
    existingSecret: ""
    password: labelstudio
    postgresPassword: ""
    replicationPassword: ""
    replicationUsername: repl_user
    secretKeys:
      adminPasswordKey: postgres-password
      replicationPasswordKey: replication-password
      userPasswordKey: password
    usePasswordFiles: false
    username: labelstudio
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      cmdWrapper: ""
      customCaCerts: []
      envInjectSources: []
      extraEnvironmentSecrets: {}
      extraEnvironmentVars: {}
      featureFlags: {}
      image:
        pullPolicy: IfNotPresent
        repository: heartexlabs/label-studio
        tag: ""
      imagePullSecrets: []
      imageRegistry: ""
      persistence:
        config:
          azure:
            containerName: ""
            folder: ""
            storageAccountKey: ""
            storageAccountKeyExistingSecret: ""
            storageAccountKeyExistingSecretKey: ""
            storageAccountName: ""
            storageAccountNameExistingSecret: ""
            storageAccountNameExistingSecretKey: ""
            urlExpirationSecs: "86400"
          gcs:
            applicationCredentialsJSON: ""
            applicationCredentialsJSONExistingSecret: ""
            applicationCredentialsJSONExistingSecretKey: ""
            bucket: ""
            folder: ""
            projectID: ""
            urlExpirationSecs: "86400"
          s3:
            accessKey: ""
            accessKeyExistingSecret: ""
            accessKeyExistingSecretKey: ""
            bucket: ""
            endpointUrl: ""
            folder: ""
            objectParameters: {}
            region: ""
            secretKey: ""
            secretKeyExistingSecret: ""
            secretKeyExistingSecretKey: ""
            urlExpirationSecs: "86400"
          volume:
            accessModes:
            - ReadWriteOnce
            annotations: {}
            existingClaim: ""
            resourcePolicy: ""
            size: 10Gi
            storageClass: ""
        enabled: true
        type: volume
      pgConfig:
        dbName: ""
        host: ""
        password:
          secretKey: ""
          secretName: ""
        port: 5432
        ssl:
          pgSslCertSecretKey: ""
          pgSslKeySecretKey: ""
          pgSslMode: ""
          pgSslRootCertSecretKey: ""
          pgSslSecretName: ""
        userName: ""
      postgresql:
        auth:
          database: ""
          existingSecret: ""
          password: ""
          postgresPassword: ""
          secretKeys:
            adminPasswordKey: ""
            replicationPasswordKey: ""
            userPasswordKey: ""
          username: ""
        service:
          ports:
            postgresql: ""
      redisConfig:
        host: ""
        password:
          secretKey: ""
          secretName: ""
        ssl:
          redisSslCaCertsSecretKey: ""
          redisSslCertFileSecretKey: ""
          redisSslCertReqs: ""
          redisSslKeyFileSecretKey: ""
          redisSslSecretName: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  containerPorts:
    postgresql: 5432
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  enabled: true
  extraDeploy: []
  fullnameOverride: ""
  global:
    cmdWrapper: ""
    customCaCerts: []
    envInjectSources: []
    extraEnvironmentSecrets: {}
    extraEnvironmentVars: {}
    featureFlags: {}
    image:
      pullPolicy: IfNotPresent
      repository: heartexlabs/label-studio
      tag: ""
    imagePullSecrets: []
    imageRegistry: ""
    persistence:
      config:
        azure:
          containerName: ""
          folder: ""
          storageAccountKey: ""
          storageAccountKeyExistingSecret: ""
          storageAccountKeyExistingSecretKey: ""
          storageAccountName: ""
          storageAccountNameExistingSecret: ""
          storageAccountNameExistingSecretKey: ""
          urlExpirationSecs: "86400"
        gcs:
          applicationCredentialsJSON: ""
          applicationCredentialsJSONExistingSecret: ""
          applicationCredentialsJSONExistingSecretKey: ""
          bucket: ""
          folder: ""
          projectID: ""
          urlExpirationSecs: "86400"
        s3:
          accessKey: ""
          accessKeyExistingSecret: ""
          accessKeyExistingSecretKey: ""
          bucket: ""
          endpointUrl: ""
          folder: ""
          objectParameters: {}
          region: ""
          secretKey: ""
          secretKeyExistingSecret: ""
          secretKeyExistingSecretKey: ""
          urlExpirationSecs: "86400"
        volume:
          accessModes:
          - ReadWriteOnce
          annotations: {}
          existingClaim: ""
          resourcePolicy: ""
          size: 10Gi
          storageClass: ""
      enabled: true
      type: volume
    pgConfig:
      dbName: ""
      host: ""
      password:
        secretKey: ""
        secretName: ""
      port: 5432
      ssl:
        pgSslCertSecretKey: ""
        pgSslKeySecretKey: ""
        pgSslMode: ""
        pgSslRootCertSecretKey: ""
        pgSslSecretName: ""
      userName: ""
    postgresql:
      auth:
        database: ""
        existingSecret: ""
        password: ""
        postgresPassword: ""
        secretKeys:
          adminPasswordKey: ""
          replicationPasswordKey: ""
          userPasswordKey: ""
        username: ""
      service:
        ports:
          postgresql: ""
    redisConfig:
      host: ""
      password:
        secretKey: ""
        secretName: ""
      ssl:
        redisSslCaCertsSecretKey: ""
        redisSslCertFileSecretKey: ""
        redisSslCertReqs: ""
        redisSslKeyFileSecretKey: ""
        redisSslSecretName: ""
    storageClass: ""
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/postgresql
    tag: 13.8.0
  kubeVersion: ""
  ldap:
    basedn: ""
    binddn: ""
    bindpw: ""
    enabled: false
    port: ""
    prefix: ""
    scheme: ""
    searchAttribute: ""
    searchFilter: ""
    server: ""
    suffix: ""
    tls:
      enabled: false
    uri: ""
  metrics:
    containerPorts:
      metrics: 9187
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customMetrics: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    enabled: false
    extraEnvVars: []
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/postgres-exporter
      tag: 0.11.1-debian-11-r22
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    prometheusRule:
      enabled: false
      labels: {}
      namespace: ""
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources:
      limits: {}
      requests: {}
    service:
      annotations:
        prometheus.io/port: '{{ .Values.metrics.service.ports.metrics }}'
        prometheus.io/scrape: "true"
      clusterIP: ""
      ports:
        metrics: 9187
      sessionAffinity: None
    serviceMonitor:
      enabled: false
      honorLabels: false
      interval: ""
      jobLabel: ""
      labels: {}
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
      selector: {}
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
  nameOverride: ""
  networkPolicy:
    egressRules:
      customRules: {}
      denyConnectionsToExternal: false
    enabled: false
    ingressRules:
      primaryAccessOnlyFrom:
        customRules: {}
        enabled: false
        namespaceSelector: {}
        podSelector: {}
      readReplicasAccessOnlyFrom:
        customRules: {}
        enabled: false
        namespaceSelector: {}
        podSelector: {}
    metrics:
      enabled: false
      namespaceSelector: {}
      podSelector: {}
  postgresqlDataDir: /bitnami/postgresql/data
  postgresqlSharedPreloadLibraries: pgaudit
  primary:
    affinity: {}
    annotations: {}
    args: []
    command: []
    configuration: ""
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    existingConfigmap: ""
    existingExtendedConfigmap: ""
    extendedConfiguration: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraPodSpec: {}
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    hostIPC: false
    hostNetwork: false
    initContainers: []
    initdb:
      args: ""
      password: ""
      postgresqlWalDir: ""
      scripts: {}
      scriptsConfigMap: ""
      scriptsSecret: ""
      user: ""
    labels: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    name: primary
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      labels: {}
      mountPath: /bitnami/postgresql
      selector: {}
      size: 8Gi
      storageClass: ""
      subPath: ""
    pgHbaConfiguration: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources:
      limits: {}
      requests:
        cpu: 250m
        memory: 256Mi
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        postgresql: ""
      ports:
        postgresql: 5432
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    standby:
      enabled: false
      primaryHost: ""
      primaryPort: ""
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  psp:
    create: false
  rbac:
    create: false
    rules: []
  readReplicas:
    affinity: {}
    annotations: {}
    args: []
    command: []
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    extendedConfiguration: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraPodSpec: {}
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    hostIPC: false
    hostNetwork: false
    initContainers: []
    labels: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    name: read
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      labels: {}
      mountPath: /bitnami/postgresql
      selector: {}
      size: 8Gi
      storageClass: ""
      subPath: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 1
    resources:
      limits: {}
      requests:
        cpu: 250m
        memory: 256Mi
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        postgresql: ""
      ports:
        postgresql: 5432
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  replication:
    applicationName: my_application
    numSynchronousReplicas: 0
    synchronousCommit: "off"
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    name: ""
  shmVolume:
    enabled: true
    sizeLimit: ""
  tls:
    autoGenerated: false
    certCAFilename: ""
    certFilename: ""
    certKeyFilename: ""
    certificatesSecret: ""
    crlFilename: ""
    enabled: false
    preferServerCiphers: true
  volumePermissions:
    containerSecurityContext:
      runAsUser: 0
    enabled: false
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r45
    resources:
      limits: {}
      requests: {}
redis:
  architecture: standalone
  auth:
    enabled: false
    existingSecret: ""
    existingSecretPasswordKey: ""
    password: ""
    sentinel: true
    usePasswordFiles: false
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      cmdWrapper: ""
      customCaCerts: []
      envInjectSources: []
      extraEnvironmentSecrets: {}
      extraEnvironmentVars: {}
      featureFlags: {}
      image:
        pullPolicy: IfNotPresent
        repository: heartexlabs/label-studio
        tag: ""
      imagePullSecrets: []
      imageRegistry: ""
      persistence:
        config:
          azure:
            containerName: ""
            folder: ""
            storageAccountKey: ""
            storageAccountKeyExistingSecret: ""
            storageAccountKeyExistingSecretKey: ""
            storageAccountName: ""
            storageAccountNameExistingSecret: ""
            storageAccountNameExistingSecretKey: ""
            urlExpirationSecs: "86400"
          gcs:
            applicationCredentialsJSON: ""
            applicationCredentialsJSONExistingSecret: ""
            applicationCredentialsJSONExistingSecretKey: ""
            bucket: ""
            folder: ""
            projectID: ""
            urlExpirationSecs: "86400"
          s3:
            accessKey: ""
            accessKeyExistingSecret: ""
            accessKeyExistingSecretKey: ""
            bucket: ""
            endpointUrl: ""
            folder: ""
            objectParameters: {}
            region: ""
            secretKey: ""
            secretKeyExistingSecret: ""
            secretKeyExistingSecretKey: ""
            urlExpirationSecs: "86400"
          volume:
            accessModes:
            - ReadWriteOnce
            annotations: {}
            existingClaim: ""
            resourcePolicy: ""
            size: 10Gi
            storageClass: ""
        enabled: true
        type: volume
      pgConfig:
        dbName: ""
        host: ""
        password:
          secretKey: ""
          secretName: ""
        port: 5432
        ssl:
          pgSslCertSecretKey: ""
          pgSslKeySecretKey: ""
          pgSslMode: ""
          pgSslRootCertSecretKey: ""
          pgSslSecretName: ""
        userName: ""
      redis:
        password: ""
      redisConfig:
        host: ""
        password:
          secretKey: ""
          secretName: ""
        ssl:
          redisSslCaCertsSecretKey: ""
          redisSslCertFileSecretKey: ""
          redisSslCertReqs: ""
          redisSslKeyFileSecretKey: ""
          redisSslSecretName: ""
      storageClass: ""
  commonAnnotations: {}
  commonConfiguration: |-
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  commonLabels: {}
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  enabled: false
  existingConfigmap: ""
  extraDeploy: []
  fullnameOverride: ""
  global:
    cmdWrapper: ""
    customCaCerts: []
    envInjectSources: []
    extraEnvironmentSecrets: {}
    extraEnvironmentVars: {}
    featureFlags: {}
    image:
      pullPolicy: IfNotPresent
      repository: heartexlabs/label-studio
      tag: ""
    imagePullSecrets: []
    imageRegistry: ""
    persistence:
      config:
        azure:
          containerName: ""
          folder: ""
          storageAccountKey: ""
          storageAccountKeyExistingSecret: ""
          storageAccountKeyExistingSecretKey: ""
          storageAccountName: ""
          storageAccountNameExistingSecret: ""
          storageAccountNameExistingSecretKey: ""
          urlExpirationSecs: "86400"
        gcs:
          applicationCredentialsJSON: ""
          applicationCredentialsJSONExistingSecret: ""
          applicationCredentialsJSONExistingSecretKey: ""
          bucket: ""
          folder: ""
          projectID: ""
          urlExpirationSecs: "86400"
        s3:
          accessKey: ""
          accessKeyExistingSecret: ""
          accessKeyExistingSecretKey: ""
          bucket: ""
          endpointUrl: ""
          folder: ""
          objectParameters: {}
          region: ""
          secretKey: ""
          secretKeyExistingSecret: ""
          secretKeyExistingSecretKey: ""
          urlExpirationSecs: "86400"
        volume:
          accessModes:
          - ReadWriteOnce
          annotations: {}
          existingClaim: ""
          resourcePolicy: ""
          size: 10Gi
          storageClass: ""
      enabled: true
      type: volume
    pgConfig:
      dbName: ""
      host: ""
      password:
        secretKey: ""
        secretName: ""
      port: 5432
      ssl:
        pgSslCertSecretKey: ""
        pgSslKeySecretKey: ""
        pgSslMode: ""
        pgSslRootCertSecretKey: ""
        pgSslSecretName: ""
      userName: ""
    redis:
      password: ""
    redisConfig:
      host: ""
      password:
        secretKey: ""
        secretName: ""
      ssl:
        redisSslCaCertsSecretKey: ""
        redisSslCertFileSecretKey: ""
        redisSslCertReqs: ""
        redisSslKeyFileSecretKey: ""
        redisSslSecretName: ""
    storageClass: ""
  image:
    debug: false
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/redis
    tag: 6.2.7-debian-11-r11
  kubeVersion: ""
  master:
    affinity: {}
    args: []
    command: []
    configuration: ""
    containerPorts:
      redis: 6379
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    count: 1
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    disableCommands:
    - FLUSHDB
    - FLUSHALL
    dnsConfig: {}
    dnsPolicy: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: []
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    kind: StatefulSet
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      medium: ""
      path: /data
      selector: {}
      size: 8Gi
      sizeLimit: ""
      storageClass: ""
      subPath: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    preExecCmds: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      internalTrafficPolicy: Cluster
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        redis: ""
      ports:
        redis: 6379
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    shareProcessNamespace: false
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: 30
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  metrics:
    command: []
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    enabled: false
    extraArgs: {}
    extraEnvVars: []
    extraVolumeMounts: []
    extraVolumes: []
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/redis-exporter
      tag: 1.43.0-debian-11-r4
    podAnnotations:
      prometheus.io/port: "9121"
      prometheus.io/scrape: "true"
    podLabels: {}
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ""
      rules: []
    redisTargetHost: localhost
    resources:
      limits: {}
      requests: {}
    service:
      annotations: {}
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      port: 9121
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      enabled: false
      honorLabels: false
      interval: 30s
      metricRelabelings: []
      namespace: ""
      relabellings: []
      scrapeTimeout: ""
  nameOverride: ""
  networkPolicy:
    allowExternal: true
    enabled: false
    extraEgress: []
    extraIngress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  pdb:
    create: false
    maxUnavailable: ""
    minAvailable: 1
  podSecurityPolicy:
    create: false
    enabled: false
  rbac:
    create: false
    rules: []
  replica:
    affinity: {}
    args: []
    autoscaling:
      enabled: false
      maxReplicas: 11
      minReplicas: 1
      targetCPU: ""
      targetMemory: ""
    command: []
    configuration: ""
    containerPorts:
      redis: 6379
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    disableCommands:
    - FLUSHDB
    - FLUSHALL
    dnsConfig: {}
    dnsPolicy: ""
    externalMaster:
      enabled: false
      host: ""
      port: 6379
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: []
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      medium: ""
      path: /data
      selector: {}
      size: 8Gi
      sizeLimit: ""
      storageClass: ""
      subPath: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: ""
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    preExecCmds: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    replicaCount: 3
    resources:
      limits: {}
      requests: {}
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      internalTrafficPolicy: Cluster
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        redis: ""
      ports:
        redis: 6379
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    shareProcessNamespace: false
    sidecars: []
    startupProbe:
      enabled: true
      failureThreshold: 22
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: 30
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  secretAnnotations: {}
  sentinel:
    args: []
    automateClusterRecovery: false
    command: []
    configuration: ""
    containerPorts:
      sentinel: 26379
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    downAfterMilliseconds: 60000
    enabled: false
    externalMaster:
      enabled: false
      host: ""
      port: 6379
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraVolumeMounts: []
    extraVolumes: []
    failoverTimeout: 18000
    getMasterTimeout: 220
    image:
      debug: false
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/redis-sentinel
      tag: 6.2.7-debian-11-r12
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    masterSet: mymaster
    parallelSyncs: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: false
      medium: ""
      selector: {}
      size: 100Mi
      storageClass: ""
    preExecCmds: []
    quorum: 2
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        redis: ""
        sentinel: ""
      ports:
        redis: 6379
        sentinel: 26379
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    startupProbe:
      enabled: true
      failureThreshold: 22
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: 30
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: ""
  sysctl:
    command: []
    enabled: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r11
    mountHostSys: false
    resources:
      limits: {}
      requests: {}
  tls:
    authClients: true
    autoGenerated: false
    certCAFilename: ""
    certFilename: ""
    certKeyFilename: ""
    certificatesSecret: ""
    dhParamsFilename: ""
    enabled: false
    existingSecret: ""
  useExternalDNS:
    additionalAnnotations: {}
    annotationKey: external-dns.alpha.kubernetes.io/
    enabled: false
    suffix: ""
  volumePermissions:
    containerSecurityContext:
      runAsUser: 0
    enabled: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r11
    resources:
      limits: {}
      requests: {}
rqworker:
  FullnameOverride: ""
  NameOverride: ""
  affinity: {}
  annotations: {}
  automountServiceAccountToken: true
  cmdWrapper: ""
  containerSecurityContext:
    allowPrivilegeEscalation: false
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  deploymentStrategy:
    type: Recreate
  dnsPolicy: ClusterFirst
  enableServiceLinks: false
  enabled: true
  extraEnvironmentSecrets: {}
  extraEnvironmentVars: {}
  extraLabels: {}
  extraVolumeMounts: []
  extraVolumes: []
  labels: {}
  livenessProbe:
    enabled: false
    failureThreshold: 2
    initialDelaySeconds: 60
    path: /health
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 3
  nodeSelector: {}
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  queues:
    critical:
      args: '"critical"'
      replicas: 1
      resources:
        limits: {}
        requests: {}
    default:
      args: '"default"'
      replicas: 4
      resources:
        limits: {}
        requests: {}
    high:
      args: '"high"'
      replicas: 1
      resources:
        limits: {}
        requests: {}
    low:
      args: '"low"'
      replicas: 1
      resources:
        limits: {}
        requests: {}
  rbac:
    create: false
    rules: []
  readinessProbe:
    enabled: false
    failureThreshold: 2
    initialDelaySeconds: 60
    path: /version
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 3
  resources:
    limits: {}
    requests: {}
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  shareProcessNamespace: false
  terminationGracePeriodSeconds: 30
  tolerations: []
  topologySpreadConstraints: []
upgradeCheck:
  enabled: false
  resources:
    limits: {}
    requests: {}
